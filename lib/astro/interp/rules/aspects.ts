// –ê–Ω–∞–ª–∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤ - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏
// –ö–ª—é—á–µ–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–ª–∞–Ω–µ—Ç

import type { ChartData, Aspect } from '../../types';

export function analyzeAspects(chartData: ChartData) {
  const items: string[] = [];
  const highlights: Array<{ tag: 'strength' | 'risk' | 'advice'; text: string }> = [];

  if (chartData.aspects.length === 0) {
    return { items, highlights, tip: '' };
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∞—Å–ø–µ–∫—Ç—ã
  const significantAspects = chartData.aspects.filter(aspect => 
    aspect.strength === 'tight' || 
    (aspect.strength === 'moderate' && ['conjunction', 'opposition', 'square', 'trine'].includes(aspect.type))
  );

  if (significantAspects.length === 0) {
    return { items, highlights, tip: '–£ –≤–∞—Å –º—è–≥–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã - –º–µ–Ω—å—à–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –Ω–æ –∏ –º–µ–Ω—å—à–µ –¥—Ä–∞–π–≤–∞.' };
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞—Å–ø–µ–∫—Ç–æ–≤
  const aspectPatterns = analyzeAspectPatterns(significantAspects);
  if (aspectPatterns.length > 0) {
    items.push(...aspectPatterns);
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Å –≤–∞–∂–Ω—ã–º–∏ –ø–ª–∞–Ω–µ—Ç–∞–º–∏
  const keyAspects = analyzeKeyAspects(significantAspects);
  keyAspects.forEach(analysis => {
    items.push(`${getAspectIcon(analysis.aspect.type)} ${analysis.description}`);
    if (analysis.strength) {
      highlights.push({ tag: 'strength', text: analysis.strength });
    }
    if (analysis.advice) {
      highlights.push({ tag: 'advice', text: analysis.advice });
    }
    if (analysis.risk) {
      highlights.push({ tag: 'risk', text: analysis.risk });
    }
  });

  // –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ –∞—Å–ø–µ–∫—Ç–æ–≤
  const balance = analyzeAspectBalance(significantAspects);
  if (balance) {
    items.push(`‚öñÔ∏è ${balance.description}`);
    if (balance.highlight) {
      highlights.push({ tag: balance.highlight.tag, text: balance.highlight.text });
    }
  }

  return {
    items,
    highlights,
    tip: '–ê—Å–ø–µ–∫—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏. –ù–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–µ —É—á–∞—Ç –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—Ç, –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –¥–∞—é—Ç —Ç–∞–ª–∞–Ω—Ç—ã.'
  };
}

function analyzeAspectPatterns(aspects: Aspect[]) {
  const patterns: string[] = [];

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º T-–∫–≤–∞–¥—Ä–∞—Ç—ã (—Ç—Ä–∏ –ø–ª–∞–Ω–µ—Ç—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö –∏ –æ–ø–ø–æ–∑–∏—Ü–∏–∏)
  const tSquares = findTSquares(aspects);
  tSquares.forEach(tSquare => {
    patterns.push(`üéØ T-–∫–≤–∞–¥—Ä–∞—Ç: ${tSquare.description} - –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–ª—å–Ω–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –±–∞–ª–∞–Ω—Å–∞.`);
  });

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–æ–ª—å—à–∏–µ —Ç—Ä–∏–Ω—ã (—Ç—Ä–∏ –ø–ª–∞–Ω–µ—Ç—ã –≤ —Ç—Ä–∏–Ω–∞—Ö)
  const grandTrines = findGrandTrines(aspects);
  grandTrines.forEach(trine => {
    patterns.push(`üî∫ –ë–æ–ª—å—à–æ–π —Ç—Ä–∏–Ω: ${trine.description} - –ø—Ä–∏—Ä–æ–¥–Ω—ã–π —Ç–∞–ª–∞–Ω—Ç, –Ω–æ –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è.`);
  });

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–µ–ª–ª–∏—É–º—ã —á–µ—Ä–µ–∑ –∞—Å–ø–µ–∫—Ç—ã
  const stelliums = findAspectStelliums(aspects);
  stelliums.forEach(stellium => {
    patterns.push(`‚≠ê –°—Ç–µ–ª–ª–∏—É–º –≤ –∞—Å–ø–µ–∫—Ç–∞—Ö: ${stellium.description} - –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è.`);
  });

  return patterns;
}

function analyzeKeyAspects(aspects: Aspect[]) {
  const analyses: Array<{
    aspect: Aspect;
    description: string;
    strength?: string;
    advice?: string;
    risk?: string;
  }> = [];

  // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –∞—Å–ø–µ–∫—Ç—ã —Å –≤–∞–∂–Ω—ã–º–∏ –ø–ª–∞–Ω–µ—Ç–∞–º–∏
  const importantPlanets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars'];
  
  aspects.forEach(aspect => {
    const isImportant = importantPlanets.includes(aspect.planet1) || 
                       importantPlanets.includes(aspect.planet2);
    
    if (isImportant || aspect.strength === 'tight') {
      const analysis = getAspectAnalysis(aspect);
      if (analysis) {
        analyses.push(analysis);
      }
    }
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-5
  return analyses
    .sort((a, b) => getAspectImportance(b.aspect) - getAspectImportance(a.aspect))
    .slice(0, 5);
}

function getAspectAnalysis(aspect: Aspect) {
  const { planet1, planet2, type, strength } = aspect;
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
  const key = `${planet1}-${planet2}-${type}`;
  const reverseKey = `${planet2}-${planet1}-${type}`;
  
  const specificAnalyses = getSpecificAspectAnalyses();
  let analysis = (specificAnalyses as any)[key] || (specificAnalyses as any)[reverseKey];
  
  if (!analysis) {
    // –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É –∞—Å–ø–µ–∫—Ç–∞ –∏ –ø–ª–∞–Ω–µ—Ç–∞–º
    analysis = getGeneralAspectAnalysis(planet1, planet2, type);
  }

  if (!analysis) return null;

  return {
    aspect,
    description: `${planet1} ${getAspectName(type)} ${planet2}: ${analysis.description}`,
    strength: analysis.strength,
    advice: analysis.advice,
    risk: analysis.risk
  };
}

function getSpecificAspectAnalyses() {
  return {
    'Sun-Moon-conjunction': {
      description: '–í–∞—à–∏ —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —É–Ω–∏—Å–æ–Ω.',
      strength: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏ —è—Å–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ.'
    },
    'Sun-Moon-opposition': {
      description: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É —Ç–µ–º, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏ —Ç–µ–º, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.',
      advice: '–£—á–∏—Ç–µ—Å—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏.'
    },
    'Sun-Moon-square': {
      description: '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–∏—Ä–æ–¥–æ–π.',
      advice: '–≠—Ç–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ä–æ—Å—Ç–∞, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –æ—Å–æ–∑–Ω–∞–µ—Ç–µ.',
      risk: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–µ—Å—Å.'
    },
    'Sun-Mercury-conjunction': {
      description: '–í–∞—à–µ –º—ã—à–ª–µ–Ω–∏–µ —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω–æ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ —Ü–µ–ª—è–º–∏.',
      strength: '–Ø—Å–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ—é —Å—É—Ç—å —Å–ª–æ–≤–∞–º–∏.'
    },
    'Venus-Mars-conjunction': {
      description: '–ì–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ª—é–±–≤–∏ –∏ —Å—Ç—Ä–∞—Å—Ç–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.',
      strength: '–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Å—Ç—Ä–∞—Å—Ç–Ω—ã–º, –Ω–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º.'
    },
    'Venus-Mars-square': {
      description: '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –∂–µ–ª–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.',
      advice: '–£—á–∏—Ç–µ—Å—å –≤—ã—Ä–∞–∂–∞—Ç—å —Å—Ç—Ä–∞—Å—Ç—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º–µ.',
      risk: '–ò–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.'
    },
    'Mercury-Mars-conjunction': {
      description: '–ë—ã—Å—Ç—Ä–æ–µ, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –ø—Ä—è–º–∞—è –º–∞–Ω–µ—Ä–∞ –æ–±—â–µ–Ω–∏—è.',
      strength: '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –∏ —É–±–µ–∂–¥–∞—Ç—å –¥—Ä—É–≥–∏—Ö.',
      risk: '–ò–Ω–æ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç–µ —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–∫–æ –∏–ª–∏ –ø–æ—Å–ø–µ—à–Ω–æ.'
    },
    'Sun-Saturn-square': {
      description: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Å–∞–º–æ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º.',
      advice: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –°–∞—Ç—É—Ä–Ω–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–ª–Ω–µ—á–Ω—ã—Ö —Ü–µ–ª–µ–π.',
      risk: '–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.'
    },
    'Moon-Saturn-square': {
      description: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –º–µ–ª–∞–Ω—Ö–æ–ª–∏–∏.',
      advice: '–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏–π –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∑—Ä–µ–ª–æ—Å—Ç–∏.',
      risk: '–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –¥–µ–ø—Ä–µ—Å—Å–∏–∏.'
    }
  };
}

function getGeneralAspectAnalysis(planet1: string, planet2: string, type: string) {
  const planetMeanings: Record<string, string> = {
    'Sun': '–ª–∏—á–Ω–æ—Å—Ç—å –∏ —Ü–µ–ª–∏',
    'Moon': '—ç–º–æ—Ü–∏–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏',
    'Mercury': '–º—ã—à–ª–µ–Ω–∏–µ –∏ –æ–±—â–µ–Ω–∏–µ',
    'Venus': '–ª—é–±–æ–≤—å –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏',
    'Mars': '—ç–Ω–µ—Ä–≥–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è',
    'Jupiter': '—Ä–æ—Å—Ç –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
    'Saturn': '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'
  };

  const meaning1 = planetMeanings[planet1] || planet1;
  const meaning2 = planetMeanings[planet2] || planet2;

  switch (type) {
    case 'conjunction':
      return {
        description: `–≠–Ω–µ—Ä–≥–∏–∏ ${meaning1} –∏ ${meaning2} —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ, —É—Å–∏–ª–∏–≤–∞—è –¥—Ä—É–≥ –¥—Ä—É–≥–∞.`,
        strength: '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–∞–µ—Ç —Å–∏–ª—É.'
      };
    case 'trine':
      return {
        description: `–ì–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É ${meaning1} –∏ ${meaning2}.`,
        strength: '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∞–ª–∞–Ω—Ç –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.',
        advice: '–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –¥–∞—Ä - –æ–Ω –¥–∞–µ—Ç—Å—è –ª–µ–≥–∫–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.'
      };
    case 'sextile':
      return {
        description: `–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ${meaning1} –∏ ${meaning2}.`,
        advice: '–ê–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ - –æ–Ω–∏ –Ω–µ –ø—Ä–∏–¥—É—Ç —Å–∞–º–∏.'
      };
    case 'square':
      return {
        description: `–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º–µ–∂–¥—É ${meaning1} –∏ ${meaning2} —Å–æ–∑–¥–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—é –∫ —Ä–æ—Å—Ç—É.`,
        advice: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.',
        risk: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–µ—Å—Å, –µ—Å–ª–∏ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.'
      };
    case 'opposition':
      return {
        description: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å ${meaning1} –∏ ${meaning2}.`,
        advice: '–ù–∞–π–¥–∏—Ç–µ –∑–æ–ª–æ—Ç—É—é —Å–µ—Ä–µ–¥–∏–Ω—É –º–µ–∂–¥—É —ç—Ç–∏–º–∏ —ç–Ω–µ—Ä–≥–∏—è–º–∏.',
        risk: '–ö—Ä–∞–π–Ω–æ—Å—Ç–∏ –≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å–æ–∑–¥–∞—é—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å.'
      };
    default:
      return null;
  }
}

function analyzeAspectBalance(aspects: Aspect[]) {
  const aspectCounts = {
    conjunction: 0,
    trine: 0,
    sextile: 0,
    square: 0,
    opposition: 0
  };

  aspects.forEach(aspect => {
    if (aspect.type in aspectCounts) {
      aspectCounts[aspect.type as keyof typeof aspectCounts]++;
    }
  });

  const harmonious = aspectCounts.conjunction + aspectCounts.trine + aspectCounts.sextile;
  const challenging = aspectCounts.square + aspectCounts.opposition;
  
  if (challenging === 0) {
    return {
      description: '–£ –≤–∞—Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã - –∂–∏–∑–Ω—å —Ç–µ—á–µ—Ç –ª–µ–≥–∫–æ.',
      highlight: {
        tag: 'advice' as const,
        text: '–ò—â–∏—Ç–µ –≤—ã–∑–æ–≤—ã –¥–ª—è —Ä–æ—Å—Ç–∞ - —Å–ª–∏—à–∫–æ–º –ª–µ–≥–∫–∞—è –∂–∏–∑–Ω—å –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—Ç–∞–≥–Ω–∞—Ü–∏–∏.'
      }
    };
  }
  
  if (harmonious === 0) {
    return {
      description: '–£ –≤–∞—Å –º–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ - –∂–∏–∑–Ω—å –ø–æ–ª–Ω–∞ –≤—ã–∑–æ–≤–æ–≤.',
      highlight: {
        tag: 'strength' as const,
        text: '–í–∞—à–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ –∏ –º—É–¥—Ä–µ–µ.'
      }
    };
  }
  
  if (challenging > harmonious * 2) {
    return {
      description: '–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã - –≤—ã –±–æ–µ—Ü –ø–æ –Ω–∞—Ç—É—Ä–µ.',
      highlight: {
        tag: 'advice' as const,
        text: '–ù–∞–π–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –≥–∞—Ä–º–æ–Ω–∏–∏ - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–æ—Ä—å–±–∞ –∏—Å—Ç–æ—â–∞–µ—Ç.'
      }
    };
  }
  
  if (harmonious > challenging * 2) {
    return {
      description: '–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã - —É –≤–∞—Å –º–Ω–æ–≥–æ –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤.',
      highlight: {
        tag: 'advice' as const,
        text: '–ê–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã - –æ–Ω–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è —Å–∞–º–∏ –ø–æ —Å–µ–±–µ.'
      }
    };
  }

  return {
    description: '–£ –≤–∞—Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤.',
    highlight: {
      tag: 'strength' as const,
      text: '–≠—Ç–æ—Ç –±–∞–ª–∞–Ω—Å –¥–∞–µ—Ç –≤–∞–º –∏ —Ç–∞–ª–∞–Ω—Ç—ã, –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è –∏—Ö —Ä–∞–∑–≤–∏—Ç–∏—è.'
    }
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function findTSquares(aspects: Aspect[]): Array<{ description: string }> {
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ T-–∫–≤–∞–¥—Ä–∞—Ç–æ–≤
  const squares = aspects.filter(a => a.type === 'square');
  const oppositions = aspects.filter(a => a.type === 'opposition');
  
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  return [];
}

function findGrandTrines(aspects: Aspect[]): Array<{ description: string }> {
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ë–æ–ª—å—à–∏—Ö —Ç—Ä–∏–Ω–æ–≤
  return [];
}

function findAspectStelliums(aspects: Aspect[]): Array<{ description: string }> {
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–µ–ª–ª–∏—É–º–æ–≤
  return [];
}

function getAspectImportance(aspect: Aspect): number {
  const importantPlanets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars'];
  const planetScore = (importantPlanets.includes(aspect.planet1) ? 2 : 1) + 
                     (importantPlanets.includes(aspect.planet2) ? 2 : 1);
  
  const strengthScore = aspect.strength === 'tight' ? 3 : aspect.strength === 'moderate' ? 2 : 1;
  const typeScore = ['conjunction', 'opposition', 'square'].includes(aspect.type) ? 2 : 1;
  
  return planetScore * strengthScore * typeScore;
}

function getAspectName(type: string): string {
  const names: Record<string, string> = {
    conjunction: '—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
    sextile: '—Å–µ–∫—Å—Ç–∏–ª—å',
    square: '–∫–≤–∞–¥—Ä–∞—Ç', 
    trine: '—Ç—Ä–∏–Ω',
    opposition: '–æ–ø–ø–æ–∑–∏—Ü–∏—è',
    quincunx: '–∫–≤–∏–Ω–∫—É–Ω—Å'
  };
  return names[type] || type;
}

function getAspectIcon(type: string): string {
  const icons: Record<string, string> = {
    conjunction: '‚òå',
    sextile: '‚öπ',
    square: '‚ñ°',
    trine: '‚ñ≥',
    opposition: '‚òç',
    quincunx: '‚öª'
  };
  return icons[type] || '‚óØ';
}