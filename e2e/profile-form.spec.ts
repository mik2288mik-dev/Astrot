import { test, expect } from '@playwright/test';

test.describe('–§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è', () => {
  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
    await page.goto('/profile/form');
  });

  test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    await expect(page.locator('input[id="name"]')).toBeVisible();
    await expect(page.locator('input[id="birthDate"]')).toBeVisible();
    await expect(page.locator('input[id="birthTime"]')).toBeVisible();
    await expect(page.locator('input[type="checkbox"]')).toBeVisible();
    await expect(page.locator('input[id="location"]')).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–æ–º–æ–≤
    await expect(page.locator('text=Placidus')).toBeVisible();
    await expect(page.locator('text=Whole Sign')).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    await expect(page.locator('text=–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç')).toBeVisible();
    await expect(page.locator('text=–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')).toBeVisible();
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeDisabled();
  });

  test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—ã', async ({ page }) => {
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
    await page.click('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤—Å—ë –µ—â—ë –æ—Ç–∫–ª—é—á–µ–Ω–∞
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeDisabled();
  });

  test('—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ–∫–±–æ–∫—Å "–ù–µ –∑–Ω–∞—é –≤—Ä–µ–º—è"', async ({ page }) => {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    await page.fill('input[id="name"]', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    await page.fill('input[id="birthDate"]', '1990-01-01');
    await page.fill('input[id="birthTime"]', '12:00');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ
    await expect(page.locator('input[id="birthTime"]')).not.toBeDisabled();
    
    // –û—Ç–º–µ—á–∞–µ–º —á–µ–∫–±–æ–∫—Å "–ù–µ –∑–Ω–∞—é –≤—Ä–µ–º—è"
    await page.check('input[type="checkbox"]');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞–ª–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∏ –æ—á–∏—Å—Ç–∏–ª–æ—Å—å
    await expect(page.locator('input[id="birthTime"]')).toBeDisabled();
    await expect(page.locator('input[id="birthTime"]')).toHaveValue('');
    
    // –°–Ω–∏–º–∞–µ–º —á–µ–∫–±–æ–∫—Å
    await page.uncheck('input[type="checkbox"]');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ
    await expect(page.locator('input[id="birthTime"]')).not.toBeDisabled();
  });

  test('—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Å—Ç', async ({ page }) => {
    // –ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    await page.fill('input[id="location"]', '–ú–æ—Å–∫');
    
    // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (—Å —É—á—ë—Ç–æ–º debounce)
    await page.waitForTimeout(500);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    await expect(page.locator('[class*="absolute"][class*="z-10"]')).toBeVisible();
    
    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await page.click('button:has-text("–ú–æ—Å–∫–≤–∞")');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –∏ –ø–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    await expect(page.locator('text=üìç')).toBeVisible();
    await expect(page.locator('text=üïê')).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–∫—Ä—ã–ª—Å—è
    await expect(page.locator('[class*="absolute"][class*="z-10"]')).not.toBeVisible();
  });

  test('–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –¥–æ–º–æ–≤', async ({ page }) => {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω Placidus
    await expect(page.locator('button:has-text("Placidus")')).toHaveClass(/bg-pastel-purple/);
    await expect(page.locator('button:has-text("Whole Sign")')).not.toHaveClass(/bg-pastel-purple/);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ Whole Sign
    await page.click('button:has-text("Whole Sign")');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è
    await expect(page.locator('button:has-text("Whole Sign")')).toHaveClass(/bg-pastel-purple/);
    await expect(page.locator('button:has-text("Placidus")')).not.toHaveClass(/bg-pastel-purple/);
  });

  test('—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –∫–Ω–æ–ø–∫–æ–π "–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"', async ({ page }) => {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.fill('input[id="name"]', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    await page.fill('input[id="birthDate"]', '1990-01-01');
    await page.fill('input[id="birthTime"]', '12:00');
    await page.fill('input[id="location"]', '–ú–æ—Å–∫–≤–∞');
    
    // –ñ–¥—ë–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ
    await page.waitForTimeout(500);
    await page.click('button:has-text("–ú–æ—Å–∫–≤–∞")');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ–º–æ–≤
    await page.click('button:has-text("Whole Sign")');
    
    // –ù–∞–∂–∏–º–∞–µ–º "–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"
    await page.click('button:has-text("–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞
    await expect(page.locator('input[id="name"]')).toHaveValue('');
    await expect(page.locator('input[id="birthDate"]')).toHaveValue('');
    await expect(page.locator('input[id="birthTime"]')).toHaveValue('');
    await expect(page.locator('input[id="location"]')).toHaveValue('');
    await expect(page.locator('input[type="checkbox"]')).not.toBeChecked();
    await expect(page.locator('button:has-text("Placidus")')).toHaveClass(/bg-pastel-purple/);
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeDisabled();
  });

  test('–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π', async ({ page }) => {
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeDisabled();
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è
    await page.fill('input[id="name"]', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeDisabled();
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É
    await page.fill('input[id="birthDate"]', '1990-01-01');
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeDisabled();
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º—è
    await page.fill('input[id="birthTime"]', '12:00');
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeDisabled();
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ
    await page.fill('input[id="location"]', '–ú–æ—Å–∫–≤–∞');
    await page.waitForTimeout(500);
    await page.click('button:has-text("–ú–æ—Å–∫–≤–∞")');
    
    // –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeEnabled();
  });

  test('–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º "–ù–µ –∑–Ω–∞—é –≤—Ä–µ–º—è"', async ({ page }) => {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫—Ä–æ–º–µ –≤—Ä–µ–º–µ–Ω–∏
    await page.fill('input[id="name"]', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    await page.fill('input[id="birthDate"]', '1990-01-01');
    
    // –û—Ç–º–µ—á–∞–µ–º "–ù–µ –∑–Ω–∞—é –≤—Ä–µ–º—è"
    await page.check('input[type="checkbox"]');
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ
    await page.fill('input[id="location"]', '–ú–æ—Å–∫–≤–∞');
    await page.waitForTimeout(500);
    await page.click('button:has-text("–ú–æ—Å–∫–≤–∞")');
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeEnabled();
  });

  test('—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è', async ({ page }) => {
    // –ú–æ–∫–∞–µ–º API –æ—Ç–≤–µ—Ç—ã
    await page.route('/api/profile', async (route) => {
      if (route.request().method() === 'POST') {
        await route.fulfill({
          status: 201,
          contentType: 'application/json',
          body: JSON.stringify({
            success: true,
            profile: {
              tgId: 123456789,
              name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
              birthDate: '1990-01-01',
              birthTime: '12:00',
              timeUnknown: false,
              location: {
                name: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
                lat: 55.7558,
                lon: 37.6176,
                timezone: 'Europe/Moscow',
                tzOffset: 3
              },
              houseSystem: 'P',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString()
            }
          })
        });
      }
    });

    // –ú–æ–∫–∞–µ–º –≥–µ–æ–∫–æ–¥–∏–Ω–≥ API
    await page.route('/api/geocode*', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          places: [{
            displayName: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
            lat: 55.7558,
            lon: 37.6176,
            country: '–†–æ—Å—Å–∏—è',
            cityLikeLabel: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
            timezone: 'Europe/Moscow',
            tzOffset: 3
          }]
        })
      });
    });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.fill('input[id="name"]', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    await page.fill('input[id="birthDate"]', '1990-01-01');
    await page.fill('input[id="birthTime"]', '12:00');
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ
    await page.fill('input[id="location"]', '–ú–æ—Å–∫–≤–∞');
    await page.waitForTimeout(500);
    await page.click('button:has-text("–ú–æ—Å–∫–≤–∞")');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    await page.click('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
    await expect(page).toHaveURL('/profile');
  });

  test('–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', async ({ page }) => {
    // –ú–æ–∫–∞–µ–º API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    await page.route('/api/profile*', async (route) => {
      if (route.request().method() === 'GET') {
        await route.fulfill({
          status: 200,
          contentType: 'application/json',
          body: JSON.stringify({
            success: true,
            profile: {
              tgId: 123456789,
              name: '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
              birthDate: '1985-06-15',
              birthTime: '14:30',
              timeUnknown: false,
              location: {
                name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Å–∏—è',
                lat: 59.9311,
                lon: 30.3609,
                timezone: 'Europe/Moscow',
                tzOffset: 3
              },
              houseSystem: 'W'
            }
          })
        });
      }
    });

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await page.reload();
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏
    await page.waitForTimeout(1000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await expect(page.locator('input[id="name"]')).toHaveValue('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    await expect(page.locator('input[id="birthDate"]')).toHaveValue('1985-06-15');
    await expect(page.locator('input[id="birthTime"]')).toHaveValue('14:30');
    await expect(page.locator('input[id="location"]')).toHaveValue('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Å–∏—è');
    await expect(page.locator('button:has-text("Whole Sign")')).toHaveClass(/bg-pastel-purple/);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await expect(page.locator('h1')).toContainText('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
  });

  test('–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã', async ({ page }) => {
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await page.fill('input[id="name"]', '');
    await page.fill('input[id="birthDate"]', 'invalid-date');
    await page.fill('input[id="birthTime"]', '25:70');
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–π
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeDisabled();
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await page.fill('input[id="name"]', '–í–∞–ª–∏–¥–Ω–æ–µ –∏–º—è');
    await page.fill('input[id="birthDate"]', '1990-01-01');
    await page.fill('input[id="birthTime"]', '12:00');
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ
    await page.fill('input[id="location"]', '–ú–æ—Å–∫–≤–∞');
    await page.waitForTimeout(500);
    
    // –ú–æ–∫–∞–µ–º –≥–µ–æ–∫–æ–¥–∏–Ω–≥
    await page.route('/api/geocode*', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          places: [{
            displayName: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
            lat: 55.7558,
            lon: 37.6176,
            country: '–†–æ—Å—Å–∏—è',
            cityLikeLabel: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
            timezone: 'Europe/Moscow',
            tzOffset: 3
          }]
        })
      });
    });
    
    await page.click('button:has-text("–ú–æ—Å–∫–≤–∞")');
    
    // –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
    await expect(page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")')).toBeEnabled();
  });

  test('—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞', async ({ page }) => {
    // –ú–æ–∫–∞–µ–º –≥–µ–æ–∫–æ–¥–∏–Ω–≥ API
    await page.route('/api/geocode*', async (route) => {
      const url = new URL(route.request().url());
      const query = url.searchParams.get('q');
      
      if (query === '–õ–æ–Ω') {
        await route.fulfill({
          status: 200,
          contentType: 'application/json',
          body: JSON.stringify({
            places: [
              {
                displayName: '–õ–æ–Ω–¥–æ–Ω, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
                lat: 51.5074,
                lon: -0.1278,
                country: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
                cityLikeLabel: '–õ–æ–Ω–¥–æ–Ω, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
                timezone: 'Europe/London',
                tzOffset: 0
              },
              {
                displayName: '–õ–æ–Ω–≥-–ê–π–ª–µ–Ω–¥, –°–®–ê',
                lat: 40.7891,
                lon: -73.1350,
                country: '–°–®–ê',
                cityLikeLabel: '–õ–æ–Ω–≥-–ê–π–ª–µ–Ω–¥, –°–®–ê',
                timezone: 'America/New_York',
                tzOffset: -5
              }
            ]
          })
        });
      }
    });

    // –í–≤–æ–¥–∏–º —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    await page.fill('input[id="location"]', '–õ–æ–Ω');
    
    // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    await page.waitForTimeout(500);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    await expect(page.locator('button:has-text("–õ–æ–Ω–¥–æ–Ω")')).toBeVisible();
    await expect(page.locator('button:has-text("–õ–æ–Ω–≥-–ê–π–ª–µ–Ω–¥")')).toBeVisible();
    
    // –í—ã–±–∏—Ä–∞–µ–º –õ–æ–Ω–¥–æ–Ω
    await page.click('button:has-text("–õ–æ–Ω–¥–æ–Ω")');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    await expect(page.locator('input[id="location"]')).toHaveValue('–õ–æ–Ω–¥–æ–Ω, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è');
    await expect(page.locator('text=üìç –õ–æ–Ω–¥–æ–Ω, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è')).toBeVisible();
    await expect(page.locator('text=üïê Europe/London (UTC+0)')).toBeVisible();
  });

  test('—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', async ({ page }) => {
    // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    await page.route('/api/profile', async (route) => {
      if (route.request().method() === 'POST') {
        const requestBody = await route.request().postDataJSON();
        
        await route.fulfill({
          status: 201,
          contentType: 'application/json',
          body: JSON.stringify({
            success: true,
            profile: {
              ...requestBody,
              tgId: 123456789,
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString()
            }
          })
        });
      }
    });

    // –ú–æ–∫–∞–µ–º –≥–µ–æ–∫–æ–¥–∏–Ω–≥
    await page.route('/api/geocode*', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          places: [{
            displayName: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
            lat: 55.7558,
            lon: 37.6176,
            country: '–†–æ—Å—Å–∏—è',
            cityLikeLabel: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
            timezone: 'Europe/Moscow',
            tzOffset: 3
          }]
        })
      });
    });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
    await page.fill('input[id="name"]', '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    await page.fill('input[id="birthDate"]', '1995-03-20');
    await page.fill('input[id="birthTime"]', '09:15');
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ
    await page.fill('input[id="location"]', '–ú–æ—Å–∫–≤–∞');
    await page.waitForTimeout(500);
    await page.click('button:has-text("–ú–æ—Å–∫–≤–∞")');
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ–º–æ–≤
    await page.click('button:has-text("Whole Sign")');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    await page.click('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
    await expect(page).toHaveURL('/profile');
  });

  test('—É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å', async ({ page }) => {
    // –ú–æ–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    await page.route('/api/profile*', async (route) => {
      if (route.request().method() === 'GET') {
        await route.fulfill({
          status: 200,
          contentType: 'application/json',
          body: JSON.stringify({
            success: true,
            profile: {
              tgId: 123456789,
              name: '–°—Ç–∞—Ä–æ–µ –∏–º—è',
              birthDate: '1990-01-01',
              birthTime: '12:00',
              timeUnknown: false,
              location: {
                name: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
                lat: 55.7558,
                lon: 37.6176,
                timezone: 'Europe/Moscow',
                tzOffset: 3
              },
              houseSystem: 'P'
            }
          })
        });
      } else if (route.request().method() === 'PUT') {
        const requestBody = await route.request().postDataJSON();
        
        await route.fulfill({
          status: 200,
          contentType: 'application/json',
          body: JSON.stringify({
            success: true,
            profile: {
              ...requestBody,
              updatedAt: new Date().toISOString()
            }
          })
        });
      }
    });

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await page.reload();
    await page.waitForTimeout(1000);
    
    // –ò–∑–º–µ–Ω—è–µ–º –∏–º—è
    await page.fill('input[id="name"]', '–ù–æ–≤–æ–µ –∏–º—è');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    await page.click('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
    await expect(page).toHaveURL('/profile');
  });

  test('–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    await page.setViewportSize({ width: 375, height: 667 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    await expect(page.locator('form')).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    const buttonsContainer = page.locator('div:has(button:has-text("–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"))');
    await expect(buttonsContainer).toHaveClass(/flex-col/);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∑–∞–Ω–∏–º–∞—é—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É
    await expect(page.locator('input[id="name"]')).toHaveClass(/w-full/);
    await expect(page.locator('input[id="location"]')).toHaveClass(/w-full/);
  });
});