import type { FullHoroscope } from '@/lib/horoscope/types';
import copyData from '@/content/copy.json';

interface Profile {
  preferredName?: string;
  language?: string;
}

interface FriendlyHoroscope {
  dateISO: string;
  greeting: string;
  tldr: string[];
  keyTransits: Array<{
    title: string;
    description: string;
    advice: string;
  }>;
  sections: {
    love: string[];
    work: string[];
    health: string[];
    growth: string[];
  };
  moon: {
    tip: string;
  };
  timeline: Array<{
    part: 'morning' | 'day' | 'evening';
    icon: string;
    tips: string[];
  }>;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
function sanitizeText(text: string): string {
  let result = text;
  
  // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
  copyData.style.forbidden.forEach(word => {
    const regex = new RegExp(word, 'gi');
    result = result.replace(regex, '');
  });
  
  // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
  result = result.replace(/\s+/g, ' ').trim();
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
  if (result.length > 100) {
    result = result.substring(0, 97) + '...';
  }
  
  return result;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TL;DR
function formatTldr(tldr: any): string[] {
  if (Array.isArray(tldr)) {
    return tldr.slice(0, 3).map(item => sanitizeText(String(item)));
  }
  
  if (typeof tldr === 'object' && tldr) {
    const items = [];
    if (tldr.mood) items.push(`‚ú® ${sanitizeText(tldr.mood)}`);
    if (tldr.energy) items.push(`‚ö° ${sanitizeText(tldr.energy)}`);
    if (tldr.focus) items.push(`üéØ ${sanitizeText(tldr.focus)}`);
    return items;
  }
  
  return ['‚ú® –î–µ–Ω—å –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π', '‚ö° –í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è', 'üéØ –§–æ–∫—É—Å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º'];
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π
function formatSection(section: string[] | undefined, type: keyof typeof copyData.sections): string[] {
  if (!section || !Array.isArray(section)) {
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
    const defaults = {
      love: ['–ü—Ä–æ—è–≤–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –±–ª–∏–∑–∫–∏–º', '–í—Ä–µ–º—è –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏–∫–∏'],
      work: ['–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞', '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–¥–µ–∏'],
      health: ['–î–æ–±–∞–≤—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å', '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º'],
      growth: ['–ò–∑—É—á–∏—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ', '–ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏']
    };
    return defaults[type] || [];
  }
  
  return section
    .slice(0, 3)
    .map(item => {
      let text = sanitizeText(String(item));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const prefix = copyData.sections[type].prefix;
      if (!text.includes(prefix) && !text.match(/^[^\w\s]/)) {
        text = `${prefix} ${text}`;
      }
      
      // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
      text = text.charAt(0).toUpperCase() + text.slice(1);
      
      return text;
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timeline
function formatTimeline(timeline: any[]): FriendlyHoroscope['timeline'] {
  const timelineConfig = copyData.timeline;
  const defaultTimeline = [
    {
      part: 'morning' as const,
      icon: timelineConfig.morning.prefix,
      tips: ['–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å–ø–æ–∫–æ–π–Ω–æ', '–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω –¥–Ω—è']
    },
    {
      part: 'day' as const,
      icon: timelineConfig.day.prefix,
      tips: ['–í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã', '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º']
    },
    {
      part: 'evening' as const,
      icon: timelineConfig.evening.prefix,
      tips: ['–û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å', '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å –±–ª–∏–∑–∫–∏–º–∏']
    }
  ];
  
  if (!timeline || !Array.isArray(timeline)) {
    return defaultTimeline;
  }
  
  return timeline.map(item => {
    const part = (item.part || 'day') as 'morning' | 'day' | 'evening';
    const config = timelineConfig[part];
    
    return {
      part: part,
      icon: config?.prefix || '‚è∞',
      tips: item.tips 
        ? item.tips.map((tip: any) => sanitizeText(String(tip)))
        : [config?.templates[0] || '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –≤—Ä–µ–º—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ']
    };
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
export function composeFriendly(
  horoscope: Partial<FullHoroscope> | any,
  profile?: Profile
): FriendlyHoroscope {
  const name = profile?.preferredName || '–¥—Ä—É–≥';
  const dateISO = horoscope?.dateISO || new Date().toISOString().split('T')[0];
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  const date = new Date(dateISO);
  const greeting = `–ü—Ä–∏–≤–µ—Ç, ${name}! –¢–≤–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ ${date.toLocaleDateString('ru-RU', { 
    day: 'numeric', 
    month: 'long' 
  })}`;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º TL;DR
  const tldr = formatTldr(horoscope?.tldr);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã
  const keyTransits = horoscope?.keyTransits && Array.isArray(horoscope.keyTransits)
    ? horoscope.keyTransits.slice(0, 3).map((transit: any) => ({
        title: sanitizeText(transit.title || '–í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–Ω—è'),
        description: sanitizeText(transit.why || transit.description || '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è'),
        advice: sanitizeText(transit.advice || '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å')
      }))
    : [
        {
          title: '–í—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π',
          description: '–≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—à–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã',
          advice: '–ù–∞—á–Ω–∏—Ç–µ —Ç–æ, —á—Ç–æ –¥–∞–≤–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏'
        },
        {
          title: '–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –æ–±—â–µ–Ω–∏—è',
          description: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ',
          advice: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã'
        },
        {
          title: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—ä—ë–º',
          description: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç–µ',
          advice: '–ó–∞–π–º–∏—Ç–µ—Å—å –ª—é–±–∏–º—ã–º –¥–µ–ª–æ–º'
        }
      ];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏
  const sections = {
    love: formatSection(horoscope?.sections?.love, 'love'),
    work: formatSection(horoscope?.sections?.work, 'work'),
    health: formatSection(horoscope?.sections?.health, 'health'),
    growth: formatSection(horoscope?.sections?.growth, 'growth')
  };
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≤–µ—Ç –ø–æ –ª—É–Ω–µ
  const moonTip = horoscope?.moon?.tip 
    ? sanitizeText(horoscope.moon.tip)
    : '–õ—É–Ω–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é';
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º timeline
  const timeline = formatTimeline(horoscope?.timeline);
  
  return {
    dateISO,
    greeting,
    tldr,
    keyTransits,
    sections,
    moon: { tip: moonTip },
    timeline
  };
}