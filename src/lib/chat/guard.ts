export type Domain = 'astro'|'numerology'|'tarot';

const RX = {
  astro: /(–Ω–∞—Ç–∞–ª|–Ω–∞—Ç–∞–ª—å–Ω–∞—è|–≥–æ—Ä–æ—Å–∫–æ–ø|–∑–Ω–∞–∫|–∞—Å—Ü–µ–Ω–¥–µ–Ω|–¥–µ—Å—Ü–µ–Ω–¥–µ–Ω|–¥–æ–º[–∞-—è]*\b|–∞—Å–ø–µ–∫—Ç|—Å–∏–Ω–∞—Å—Ç—Ä|—Å–æ–≤–º–µ—Å—Ç–∏–º|—Ç—Ä–∞–Ω–∑–∏—Ç|—Å–æ–ª—è—Ä|–ª—É–Ω–∞—Ä|—Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥|—ç—Ñ–µ–º–µ—Ä–∏–¥|–ø–ª–∞–Ω–µ—Ç|–≤–µ–Ω–µ—Ä|–º–∞—Ä—Å|—é–ø–∏—Ç–µ—Ä|—Å–∞—Ç—É—Ä–Ω|—É—Ä–∞–Ω|–Ω–µ–ø—Ç—É–Ω|–ø–ª—É—Ç–æ–Ω|—Å–æ–ª–Ω—Ü|–ª—É–Ω[–∞—ã]|–º–µ—Ä–∫—É—Ä)/i,
  numerology: /(–Ω—É–º–µ—Ä–æ–ª–æ–≥|—á–∏—Å–ª–æ —Å—É–¥—å–±—ã|—á–∏—Å–ª–æ –¥—É—à–∏|–º–∞—Ç—Ä–∏—Ü|–ø–∏—Ñ–∞–≥–æ—Ä|–∂–∏–∑–Ω–µ–Ω–Ω(?:–æ–µ|—ã–π) —á–∏—Å–ª–æ|–∫–≤–∞–¥—Ä–∞—Ç –ø–∏—Ñ–∞–≥–æ—Ä|–ª–∏—á–Ω\w* —á–∏—Å–ª–æ|—Å—É–¥—å–±\w* —á–∏—Å–ª–æ)/i,
  tarot: /(—Ç–∞—Ä–æ|–∞—Ä–∫–∞–Ω|—Ä–∞—Å–∫–ª–∞–¥|–∫–æ–ª–æ–¥[–∞—ã]|—Å–ø—Ä–µ–¥|–∫–∞—Ä—Ç[–∞—ã].*–≥–∞–¥–∞–Ω|–º–ª–∞–¥—à|—Å—Ç–∞—Ä—à|–∂–µ–∑–ª|–∫—É–±–∫|–º–µ—á|–ø–µ–Ω—Ç–∞–∫–ª)/i,
};

export function classify(text: string): Domain | null {
  if (RX.astro.test(text)) return 'astro';
  if (RX.numerology.test(text)) return 'numerology';
  if (RX.tarot.test(text)) return 'tarot';
  return null;
}

export type GuardDecision =
  | { action:'allow'; domain: Domain }                        // –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
  | { action:'soft-redirect'; domain: Domain }                // –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ –¥–æ–º–µ–Ω—É, –Ω–æ —Ç–∞–∫—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ —Ç–µ–º—É
  | { action:'ask-domain'; options: {label:string;prompt:string}[] }; // –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã (1 —Ä–∞–∑)

export function decide(prev: Domain | null, text: string, lastWasGuard: boolean): GuardDecision {
  const cls = classify(text);
  if (cls) return { action: 'allow', domain: cls };
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–æ–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—è–≥–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  if (prev) return { action: 'soft-redirect', domain: prev };
  
  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç —Å—Ç—Ä–∞–∂–∞, –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º—Å—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
  if (lastWasGuard) return { action: 'soft-redirect', domain: 'astro' };
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  return {
    action: 'ask-domain',
    options: [
      { label:'‚ú® –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞', prompt:'–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ' },
      { label:'üíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', prompt:'–ü—Ä–æ–≤–µ—Ä—å –Ω–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –¥–∞—Ç–∞–º —Ä–æ–∂–¥–µ–Ω–∏—è' },
      { label:'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è', prompt:'–ü–æ—Å—á–∏—Ç–∞–π –º–æ–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã' },
      { label:'üÉè –¢–∞—Ä–æ', prompt:'–°–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥ —Ç–∞—Ä–æ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é' },
    ],
  };
}

// –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export function detectDomain(q: string): Domain | null {
  return classify(q);
}

export function isAllowed(q: string) { 
  const d = classify(q); 
  return { allowed: !!d, domain: d }; 
}