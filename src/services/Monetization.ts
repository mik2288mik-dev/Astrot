export interface PremiumFeature {
  id: string;
  name: string;
  description: string;
  price: number; // –í Telegram Stars
  icon: string;
}

export interface PaymentData {
  feature: PremiumFeature;
  userId: number;
  paymentId?: string;
}

export interface PaymentResult {
  success: boolean;
  paymentId?: string;
  error?: string;
}

class MonetizationService {
  private features: PremiumFeature[] = [
    {
      id: 'premium_access',
      name: '–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø',
      description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã',
      price: 100, // 100 Telegram Stars
      icon: '‚≠ê',
    },
    {
      id: 'detailed_natal',
      name: '–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞',
      description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –∞—Å–ø–µ–∫—Ç–∞–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º–∏',
      price: 50,
      icon: 'üîÆ',
    },
    {
      id: 'compatibility',
      name: '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
      description: '–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –ø–æ –Ω–∞—Ç–∞–ª—å–Ω—ã–º –∫–∞—Ä—Ç–∞–º',
      price: 75,
      icon: 'üíï',
    },
    {
      id: 'yearly_forecast',
      name: '–ì–æ–¥–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑',
      description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥',
      price: 150,
      icon: 'üìÖ',
    },
  ];

  getFeatures(): PremiumFeature[] {
    return this.features;
  }

  getFeatureById(id: string): PremiumFeature | undefined {
    return this.features.find(feature => feature.id === id);
  }

  async initiatePremiumPayment(userId: number): Promise<PaymentResult> {
    const premiumFeature = this.getFeatureById('premium_access');
    if (!premiumFeature) {
      return { success: false, error: '–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    return this.initiatePayment({ feature: premiumFeature, userId });
  }

  async initiatePayment(paymentData: PaymentData): Promise<PaymentResult> {
    try {
      const tg = window.Telegram?.WebApp;
      
      if (!tg) {
        throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è invoice
      const invoice = await this.createInvoice(paymentData);
      
      return new Promise((resolve) => {
        tg.openInvoice(invoice.url, (status: string) => {
          if (status === 'paid') {
            this.handleSuccessfulPayment(paymentData);
            resolve({
              success: true,
              paymentId: invoice.paymentId,
            });
          } else if (status === 'cancelled') {
            resolve({
              success: false,
              error: '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
            });
          } else if (status === 'failed') {
            resolve({
              success: false,
              error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ',
            });
          } else {
            resolve({
              success: false,
              error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${status}`,
            });
          }
        });
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      };
    }
  }

  private async createInvoice(paymentData: PaymentData) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É –±—ç–∫–µ–Ω–¥—É
    // –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è invoice —á–µ—Ä–µ–∑ Telegram Bot API
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockInvoice = {
      url: 'https://t.me/invoice/demo', // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ invoice
      paymentId: `payment_${Date.now()}`,
    };

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return mockInvoice;
  }

  private async handleSuccessfulPayment(paymentData: PaymentData) {
    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –±—ç–∫–µ–Ω–¥ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
      const response = await fetch('/api/payment/confirm', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: paymentData.userId,
          featureId: paymentData.feature.id,
          amount: paymentData.feature.price,
          timestamp: new Date().toISOString(),
        }),
      });

      if (response.ok) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserPremiumStatus(paymentData.userId, paymentData.feature.id);
        
        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        this.showSuccessNotification(paymentData.feature);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
    }
  }

  private updateUserPremiumStatus(userId: number, featureId: string) {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –±—ç–∫–µ–Ω–¥–æ–º
    const userPremiumFeatures = this.getUserPremiumFeatures(userId);
    userPremiumFeatures.push(featureId);
    localStorage.setItem(`premium_${userId}`, JSON.stringify(userPremiumFeatures));
  }

  getUserPremiumFeatures(userId: number): string[] {
    const stored = localStorage.getItem(`premium_${userId}`);
    return stored ? JSON.parse(stored) : [];
  }

  hasFeature(userId: number, featureId: string): boolean {
    const userFeatures = this.getUserPremiumFeatures(userId);
    return userFeatures.includes(featureId) || userFeatures.includes('premium_access');
  }

  private showSuccessNotification(feature: PremiumFeature) {
    const tg = window.Telegram?.WebApp;
    if (tg) {
      tg.showAlert(`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! ${feature.icon} ${feature.name} —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω.`);
      tg.HapticFeedback.notificationOccurred('success');
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è—Ö
  showPremiumInfo() {
    const tg = window.Telegram?.WebApp;
    if (tg) {
      const message = `üåü –ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n${this.features.map(f => 
        `${f.icon} ${f.name} - ${f.price} ‚≠ê\n${f.description}`
      ).join('\n\n')}`;
      
      tg.showPopup({
        title: '–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏',
        message,
        buttons: [
          { id: 'buy', type: 'default', text: '–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º' },
          { id: 'cancel', type: 'cancel', text: '–ó–∞–∫—Ä—ã—Ç—å' }
        ]
      }, (buttonId) => {
        if (buttonId === 'buy') {
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–∫—É–ø–∫–∏
          console.log('Redirect to premium purchase');
        }
      });
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserSubscriptionStatus(userId: number) {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É
      const response = await fetch(`/api/user/${userId}/subscription`);
      if (response.ok) {
        return await response.json();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
    
    // –ó–∞–≥–ª—É—à–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const features = this.getUserPremiumFeatures(userId);
    return {
      hasPremium: features.includes('premium_access'),
      features: features,
      expiresAt: null, // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    };
  }
}

export const monetizationService = new MonetizationService();