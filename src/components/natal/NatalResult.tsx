'use client';
import BirthHeader from '../birth/BirthHeader';
import { formatZodiacSign } from '../../../lib/zodiac/format';
import { SUN, MOON, ASC } from '../../../lib/texts/signs';
import { ELEMENT_TEXTS } from '../../../lib/texts/elements';
import type { NatalResult } from '../../../lib/natal/types';
import type { BirthData } from '../../../lib/birth/types';
import { HelpCircle } from '@tabler/icons-react';
import { useState } from 'react';
import { formatBirthLine } from '../../../lib/birth/format';

interface NatalResultProps {
  result: NatalResult;
  birthData: BirthData;

export default function NatalResult({ result, birthData }: NatalResultProps) {
  const { big3, elements } = result;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∑–Ω–∞–∫–æ–≤
  const sunText = SUN[big3.sun.sign] || "–¢–≤–æ—è —Å–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞.";
  const moonText = MOON[big3.moon.sign] || "–¢–≤–æ—è –ª—É–Ω–Ω–∞—è –ø—Ä–∏—Ä–æ–¥–∞ –≥–ª—É–±–æ–∫–∞ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞.";
  const ascText = big3.asc.sign ? (ASC[big3.asc.sign] || "–¢–≤–æ—è –ø–æ–¥–∞—á–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞ –∏ –ø—Ä–∏—Ç—è–≥–∞—Ç–µ–ª—å–Ω–∞.") : "";
  
  // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
  const dominantElement = Object.entries(elements).reduce((max, [element, count]) => 
    count > max.count ? { element, count } : max,
    { element: '', count: 0 }
  );
  
  const elementText = ELEMENT_TEXTS[dominantElement.element] || "";
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  const [activeHelp, setActiveHelp] = useState<string | null>(null);
  
  const helpTexts = {
    sun: "–°–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ —Ç–≤–æ—è —Å—É—Ç—å, —Ü–µ–Ω—Ç—Ä –ª–∏—á–Ω–æ—Å—Ç–∏. –ó–Ω–∞–∫ –°–æ–ª–Ω—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫—Ç–æ —Ç—ã –µ—Å—Ç—å –Ω–∞ —Å–∞–º–æ–º –≥–ª—É–±–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ.",
    moon: "–õ—É–Ω–∞ ‚Äî —ç—Ç–æ —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ. –ó–Ω–∞–∫ –õ—É–Ω—ã —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞.",
    asc: "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç ‚Äî —ç—Ç–æ —Ç–≤–æ—è –≤–Ω–µ—à–Ω—è—è –º–∞—Å–∫–∞, –ø–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ.",
    elements: "–°—Ç–∏—Ö–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –±–∞–ª–∞–Ω—Å —ç–Ω–µ—Ä–≥–∏–π –≤ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–µ. –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Å—Ç–∏—Ö–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–∏—Ä–æ–º."
  };
  
  const toggleHelp = (key: string) => {
    setActiveHelp(activeHelp === key ? null : key);
  };
  
  const renderHelpIcon = (key: string) => (
    <button
      onClick={() => toggleHelp(key)}
      className="ml-2 text-neutral-400 hover:text-neutral-600 transition-colors"
      aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"
    >
      <HelpCircle size={18} />
    </button>
  );
  
  const renderHelpText = (key: string) => (
    activeHelp === key && (
      <div className="mt-2 p-3 bg-purple-50 rounded-lg text-sm text-purple-700">
        {helpTexts[key as keyof typeof helpTexts]}
      </div>
    )
  );
  
  return (
    <div className="w-full max-w-[320px] mx-auto space-y-6">
      {/* Birth Header */}
      <BirthHeader 
        birth={birthData} 
      />
      
      {/* –°–µ–∫—Ü–∏—è Big-3 */}
      <section className="space-y-4">
        <h2 className="text-xl font-bold text-neutral-800 text-center mb-6">
          –¢–≤–æ–∏ —Ç—Ä–∏ –∫–∏—Ç–∞
        </h2>
        
        {/* –°–æ–ª–Ω—Ü–µ */}
        <div className="glass p-5">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center">
              <span className="text-2xl mr-2">‚òâ</span>
              <h3 className="text-lg font-semibold text-neutral-800">
                –°–æ–ª–Ω—Ü–µ –≤ {formatZodiacSign(big3.sun.sign)}
              </h3>
              {renderHelpIcon('sun')}
            </div>
          </div>
          {renderHelpText('sun')}
          <p className="text-sm text-neutral-600 leading-relaxed">
            {sunText}
          </p>
        </div>
        
        {/* –õ—É–Ω–∞ */}
        <div className="glass p-5">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center">
              <span className="text-2xl mr-2">‚òΩ</span>
              <h3 className="text-lg font-semibold text-neutral-800">
                –õ—É–Ω–∞ –≤ {formatZodiacSign(big3.moon.sign)}
              </h3>
              {renderHelpIcon('moon')}
            </div>
          </div>
          {renderHelpText('moon')}
          <p className="text-sm text-neutral-600 leading-relaxed">
            {moonText}
          </p>
        </div>
        
        {/* –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç */}
        {big3.asc.sign && (
          <div className="glass p-5">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center">
                <span className="text-2xl mr-2">‚Üë</span>
                <h3 className="text-lg font-semibold text-neutral-800">
                  –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –≤ {formatZodiacSign(big3.asc.sign)}
                </h3>
                {renderHelpIcon('asc')}
              </div>
            </div>
            {renderHelpText('asc')}
            <p className="text-sm text-neutral-600 leading-relaxed">
              {ascText}
            </p>
          </div>
        )}
      </section>
      
      {/* –°–µ–∫—Ü–∏—è –°—Ç–∏—Ö–∏–π */}
      <section className="space-y-4">
        <div className="flex items-center justify-center">
          <h2 className="text-xl font-bold text-neutral-800">
            –ë–∞–ª–∞–Ω—Å —Å—Ç–∏—Ö–∏–π
          </h2>
          {renderHelpIcon('elements')}
        </div>
        {renderHelpText('elements')}
        
        <div className="glass p-5">
          <div className="space-y-3">
            {Object.entries(elements).map(([element, count]) => {
              const percentage = Math.round((count / 10) * 100);
              const isMax = element === dominantElement.element;
              
              const elementEmojis: Record<string, string> = {
                'fire': 'üî•',
                'earth': 'üåç',
                'air': 'üí®',
                'water': 'üíß'
              };
              
              const elementNames: Record<string, string> = {
                'fire': '–û–≥–æ–Ω—å',
                'earth': '–ó–µ–º–ª—è',
                'air': '–í–æ–∑–¥—É—Ö',
                'water': '–í–æ–¥–∞'
              };
              
              return (
                <div key={element}>
                  <div className="flex items-center justify-between mb-1">
                    <span className="text-sm font-medium text-neutral-700 flex items-center">
                      <span className="mr-1">{elementEmojis[element]}</span>
                      {elementNames[element]}
                    </span>
                    <span className={`text-sm font-bold ${isMax ? 'text-purple-600' : 'text-neutral-600'}`}>
                      {percentage}%
                    </span>
                  </div>
                  <div className="w-full bg-neutral-200 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full transition-all ${
                        isMax ? 'bg-gradient-to-r from-purple-500 to-purple-600' : 'bg-neutral-400'
                      }`}
                      style={{ width: `${percentage}%` }}
                    />
                  </div>
                </div>
              );
            })}
          </div>
          
          {dominantElement.element && (
            <div className="mt-4 pt-4 border-t border-neutral-200">
              <p className="text-sm text-neutral-600 leading-relaxed">
                {elementText}
              </p>
            </div>
          )}
        </div>
      </section>
      
      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <section className="glass p-5 text-center">
        <p className="text-xs text-neutral-500">
          –†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è
        </p>
        <p className="text-sm font-medium text-neutral-700 mt-1">
          {formatBirthLine(birthData)}
        </p>
      </section>
    </div>
  );
}