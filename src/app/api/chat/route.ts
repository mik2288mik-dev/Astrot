import OpenAI from 'openai';
import { NextResponse } from 'next/server';
import { decide, type Domain } from '@/lib/chat/guard';
import { systemPrompt } from '@/lib/chat/system';

export const dynamic = 'force-dynamic';

export async function POST(req: Request) {
  try {
    const { message, domain: clientDomain, lastWasGuard } = await req.json();
    const text = String(message ?? '').trim();

    const decision = decide(clientDomain ?? null, text, !!lastWasGuard);

    // 1) –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if (decision.action === 'ask-domain') {
      return NextResponse.json({
        type: 'guard',
        text: '–Ø –≤–∞—à –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ üòä –û—Ç–≤–µ—á–∞—é –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—é, –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—é –∏ —Ç–∞—Ä–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:',
        options: decision.options,
        once: true,
      });
    }

    const domain = decision.domain as Domain;

    // 2) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ –ø–æ–¥ –¥–æ–º–µ–Ω (–∂—ë—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞–Ω–∏—è)
    const sys = systemPrompt(domain);

    // 3) –ú—è–≥–∫–∞—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–ª–∫–∞ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥)
    const softPrefix = decision.action === 'soft-redirect'
      ? (domain==='astro'
          ? '–≠—Ç–æ –≤–Ω–µ —Ç–æ—á–Ω–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, –Ω–æ –¥–∞–≤–∞–π –≤–µ—Ä–Ω—ë–º—Å—è –∫ –∑–≤—ë–∑–¥–∞–º. '
          : domain==='numerology'
            ? '–≠—Ç–æ –≤–Ω–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, –¥–∞–≤–∞–π –∫ —á–∏—Å–ª–∞–º. '
            : '–≠—Ç–æ –≤–Ω–µ —Ç–∞—Ä–æ, –¥–∞–≤–∞–π –∫ —Ä–∞—Å–∫–ª–∞–¥–∞–º. ')
      : '';

    const key = process.env.OPENAI_API_KEY;
    if (!key) return NextResponse.json({ error: 'OPENAI_API_KEY missing' }, { status: 500 });
    const openai = new OpenAI({ apiKey: key });

    // –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
    const rsp = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: sys },
        { role: 'user', content: softPrefix + text },
      ],
    });

    return NextResponse.json({
      type: 'ai',
      domain,                                // <- –≤–µ—Ä–Ω—ë–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω
      text: rsp.choices[0]?.message?.content ?? '',
    });
  } catch (error: unknown) {
    console.error('Chat API error:', error);
    return NextResponse.json({ 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }, { status: 500 });
  }
}