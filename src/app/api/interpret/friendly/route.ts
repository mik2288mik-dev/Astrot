import { NextRequest, NextResponse } from 'next/server';
import { kv } from '@vercel/kv';
import { z } from 'zod';

const RequestSchema = z.object({
  tgId: z.string().optional(),
  birth: z.object({
    year: z.number(),
    month: z.number(),
    day: z.number(),
    hour: z.number().optional(),
    minute: z.number().optional(),
    lat: z.number().optional(),
    lon: z.number().optional(),
    tz: z.string().optional(),
    place: z.string().optional(),
  }).optional(),
  date: z.string().optional(), // —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è
});

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { tgId, birth, date } = RequestSchema.parse(body);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤
    const targetDate = date || new Date().toISOString().split('T')[0];
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const cacheKey = `friendly:${tgId || 'anon'}:${targetDate}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = await kv.get(cacheKey);
    if (cached) {
      return NextResponse.json({
        success: true,
        ...cached,
        cached: true,
      });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    const tips = await generateFriendlyTips(birth, targetDate);
    
    const response = {
      success: true,
      tips,
      date: targetDate,
    };
    
    // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 24 —á–∞—Å–∞
    await kv.setex(cacheKey, 24 * 60 * 60, response);
    
    return NextResponse.json(response);
    
  } catch (error) {
    console.error('Friendly tips API error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã' 
      },
      { status: 500 }
    );
  }
}

interface BirthData {
  year?: number;
  month?: number;
  day?: number;
  hour?: number;
  minute?: number;
  lat?: number;
  lon?: number;
  tz?: string;
  place?: string;
}

async function generateFriendlyTips(birth?: BirthData, date?: string): Promise<Array<{
  id: string;
  text: string;
  emoji?: string;
  category?: string;
}>> {
  // –ë–∞–∑–æ–≤—ã–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –±–µ–∑ –∞—Å—Ç—Ä–æ–∂–∞—Ä–≥–æ–Ω–∞
  const baseTips = [
    {
      id: 'energy',
      text: '–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å—Å—è —Ç–µ–º, —á—Ç–æ –¥–∞–µ—Ç –≤–∞–º —ç–Ω–µ—Ä–≥–∏—é',
      emoji: '‚ö°',
      category: 'energy'
    },
    {
      id: 'communication',
      text: '–í—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ‚Äî –ª—é–¥–∏ –≥–æ—Ç–æ–≤—ã –≤–∞—Å —Å–ª—É—à–∞—Ç—å',
      emoji: 'üí¨',
      category: 'social'
    },
    {
      id: 'creativity',
      text: '–í–∞—à–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏–¥–µ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å',
      emoji: 'üé®',
      category: 'creativity'
    },
    {
      id: 'intuition',
      text: '–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–∏–º –æ—â—É—â–µ–Ω–∏—è–º ‚Äî –æ–Ω–∏ –ø–æ–¥—Å–∫–∞–∂—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å',
      emoji: 'üîÆ',
      category: 'intuition'
    },
    {
      id: 'relationships',
      text: '–•–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –±–ª–∏–∑–∫–∏–º–∏',
      emoji: 'üíù',
      category: 'relationships'
    },
    {
      id: 'learning',
      text: '–ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –ª–µ–≥–∫–æ —É—Å–≤–∞–∏–≤–∞—é—Ç—Å—è ‚Äî –≤—Ä–µ–º—è —É—á–∏—Ç—å—Å—è!',
      emoji: 'üìö',
      category: 'growth'
    },
    {
      id: 'self_care',
      text: '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö —É—Å–ø–µ—Ö–æ–≤',
      emoji: 'üå∏',
      category: 'wellness'
    },
    {
      id: 'opportunities',
      text: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Å–∞–º—ã—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö',
      emoji: 'üö™',
      category: 'opportunities'
    },
    {
      id: 'balance',
      text: '–ù–∞–π–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –æ—Ç–¥—ã—Ö–æ–º ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ –≥–∞—Ä–º–æ–Ω–∏–∏',
      emoji: '‚öñÔ∏è',
      category: 'balance'
    },
    {
      id: 'gratitude',
      text: '–ü–æ–¥—É–º–∞–π—Ç–µ –æ —Ç–æ–º, –∑–∞ —á—Ç–æ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã ‚Äî —ç—Ç–æ –ø—Ä–∏–≤–ª–µ—á–µ—Ç –µ—â–µ –±–æ–ª—å—à–µ —Ö–æ—Ä–æ—à–µ–≥–æ',
      emoji: 'üôè',
      category: 'mindfulness'
    }
  ];

  // –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
  const seasonalTips = getSeasonalTips(date);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏ —Å–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
  const allTips = [...baseTips, ...seasonalTips];
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 3-5 —Å–æ–≤–µ—Ç–æ–≤
  const selectedCount = Math.floor(Math.random() * 3) + 3; // 3-5 —Å–æ–≤–µ—Ç–æ–≤
  const shuffled = allTips.sort(() => 0.5 - Math.random());
  
  return shuffled.slice(0, selectedCount);
}

function getSeasonalTips(date?: string): Array<{
  id: string;
  text: string;
  emoji?: string;
  category?: string;
}> {
  const now = date ? new Date(date) : new Date();
  const month = now.getMonth() + 1;
  const day = now.getDate();
  
  const tips = [];
  
  // –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Å–æ–≤–µ—Ç—ã
  if (month === 12 && day >= 25 || month === 1 && day <= 7) {
    tips.push({
      id: 'new_year',
      text: '–í—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ —Å–≤–µ–∂–∏—Ö –∏–¥–µ–π ‚Äî –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª—å –Ω–∞ –≥–æ–¥!',
      emoji: 'üéÜ',
      category: 'seasonal'
    });
  }
  
  // –í–µ—Å–µ–Ω–Ω–∏–µ —Å–æ–≤–µ—Ç—ã
  if (month >= 3 && month <= 5) {
    tips.push({
      id: 'spring',
      text: '–í–µ—Å–Ω–∞ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –Ω–æ–≤—É—é –∂–∏–∑–Ω—å ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω',
      emoji: 'üå±',
      category: 'seasonal'
    });
  }
  
  // –õ–µ—Ç–Ω–∏–µ —Å–æ–≤–µ—Ç—ã
  if (month >= 6 && month <= 8) {
    tips.push({
      id: 'summer',
      text: '–õ–µ—Ç–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ —Å–∞–º—ã–µ —Å–º–µ–ª—ã–µ –ø–ª–∞–Ω—ã',
      emoji: '‚òÄÔ∏è',
      category: 'seasonal'
    });
  }
  
  // –û—Å–µ–Ω–Ω–∏–µ —Å–æ–≤–µ—Ç—ã
  if (month >= 9 && month <= 11) {
    tips.push({
      id: 'autumn',
      text: '–û—Å–µ–Ω—å ‚Äî –≤—Ä–µ–º—è —Å–æ–±–∏—Ä–∞—Ç—å –ø–ª–æ–¥—ã —Å–≤–æ–∏—Ö —É—Å–∏–ª–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—É–¥—É—â–µ–µ',
      emoji: 'üçÇ',
      category: 'seasonal'
    });
  }
  
  return tips;
}

export async function GET(req: NextRequest) {
  // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ—Ä–µ–º tgId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
  const url = new URL(req.url);
  const tgId = url.searchParams.get('tgId');
  const date = url.searchParams.get('date');
  
  return POST(new NextRequest(req.url, {
    method: 'POST',
    body: JSON.stringify({ tgId, date }),
    headers: req.headers,
  }));
}